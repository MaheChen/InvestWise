"""CSC111 Winter 2023 Course Project: Stockify

This file contains the functions and classes to organize our data into data classes.

Copyright and Usage Information
===============================

This file is provided solely for the personal and private use of the Computer Science Department at the
University of Toronto St. George campus. All forms of distribution of this code, whether as given or with any changes,
are expressly prohibited.

This file is Copyright (c) 2023 Daniel Cheng.
"""
from __future__ import annotations
from typing import Optional


class StockData:
    """ A data class which represents a stocks company and several attributes for the company and its stock.

    Instance Attributes:
    - symbol:
        A unique series of letters which represents the stock in the stock market.
    - sector:
        The industry in which the stocks company is in.
    - address:
        The location of the stocks company.
    - company name:
        The name of the company.
    - previous close:
        The current price of the stock.
    - fifty two week high:
        The highest price this stock has been traded for in the past year (52 weeks).
    - fifty two week low:
        The lowest price this stock has been traded for in the past year (52 weeks).
    - two hundred day average:
        The average price of the stock over the last 200 days.
    - market cap:
        The total value of all the company's shares of stock.
    - shares outstanding
        The amount of stock which is held by a company's shareholders on the open market.
    - dividend yield:
        A financial ratio conveying the percentage of the company's share price that it pays out in dividends each year.
    - environmental score:
        The environmental score is a numerical value conveying how sustainable a company is in the areas of
        environmental impact.
    - governance score:
        A 1 - 10 numeric representation indicating a company's governance risk relative to the company's region
        1 indicates the lowest governance risk while 10 indicates the highest.
    - social score:
        A numerical value representing how the company's stock is perceived within the media.
    -  profit margins:
        The amount by which revenue from sales exceeds costs in the company.
    - book value:
        A theoretical value representing the amount of money that would be paid to shareholders if the company was
        liquidated and had all of its liabilities paid off.
    - trailing eps:
        trailing earnings per share is a company's earnings generated over the prior fiscal year based on per share.
    - total cash:
        The total amount of liquid cash the company has for disposal.
    - debt to equity:
        A financial ratio of the company indicating the proportion of shareholders equity and debt used to finance
        company assets.
    - return on equity:
        A measure of the profitability of the company in relation to its equity.
    - earnings growth:
        The annual compound growth rate of the company based on earnings from investments.
    - ebitda:
        The company's earnings before interest, taxes, depreciation, and amortization (ebitda) measures the
        profitability based solely on the operating business.
    - current liabilities:
        A value (in USD) representing all obligations and debts of the company that are to be settled in cash within
        the fiscal year.
    - revenue:
        The total amount of income generated by the company (in USD)
    - sector averages:
        A SectorAverage object that stores the average of data for each of the stock's optional data. The averages are
        used in place of an attribute in the case of missing values for that attribute from the extracted data.
    """
    symbol: str
    sector: str
    address: str
    company_name: str

    previous_close: float
    fifty_two_week_high: float
    fifty_two_week_low: float
    two_hundred_day_average: float
    market_cap: float
    shares_outstanding: int

    dividend_yield: Optional[float]
    environment_score: Optional[float]
    governance_score: Optional[float]
    social_score: Optional[float]
    profit_margins: Optional[float]
    book_value: Optional[float]
    trailing_eps: Optional[float]
    total_cash: Optional[float]
    debt_to_equity: Optional[float]
    return_on_equity: Optional[float]
    earnings_growth: Optional[float]
    ebitda: Optional[float]
    current_liabilities: Optional[float]
    revenue: Optional[float]

    sector_averages: Optional[SectorAverage]

    def __init__(self, symbol: str, sector: str, company_name: str, address: str, previous_close: float,
                 dividend_yield: float, fifty_two_week_high: float, fifty_two_week_low: float,
                 two_hundred_day_average: float, market_cap: float, environment_score: float, social_score: float,
                 governance_score: float, profit_margins: float, book_value: float,
                 trailing_eps: float, shares_outstanding: int, total_cash: float, debt_to_equity: float,
                 return_on_equity: float, earnings_growth: float, ebitda: float, current_liabilities: float,
                 revenue: float) -> None:
        """ Initiallizes this StockData with the given information. """

        self.symbol = symbol
        self.sector = sector
        self.company_name = company_name
        self.address = address

        self.previous_close = previous_close
        self.fifty_two_week_high = fifty_two_week_high
        self.fifty_two_week_low = fifty_two_week_low
        self.two_hundred_day_average = two_hundred_day_average
        self.market_cap = market_cap
        self.shares_outstanding = shares_outstanding

        self.dividend_yield = dividend_yield
        self.environment_score = environment_score
        self.social_score = social_score
        self.governance_score = governance_score
        self.profit_margins = profit_margins
        self.book_value = book_value
        self.trailing_eps = trailing_eps
        self.total_cash = total_cash
        self.debt_to_equity = debt_to_equity
        self.return_on_equity = return_on_equity
        self.earnings_growth = earnings_growth
        self.ebitda = ebitda
        self.current_liabilities = current_liabilities
        self.revenue = revenue

        self.sector_averages = None

    def __str__(self) -> str:
        """ Return a string representation for this stock data. """
        str_so_far = f"Symbol = {self.symbol}\n"
        str_so_far += f"Sector = {self.sector}\n"
        str_so_far += f"Company Name = {self.company_name}\n"
        str_so_far += f"Address = {self.address}\n"
        str_so_far += f"Previous Close = {self.previous_close}\n"
        str_so_far += f"Fifty Two Week High = {self.fifty_two_week_high}\n"
        str_so_far += f"Fifty Two Week Low = {self.fifty_two_week_low}\n"
        str_so_far += f"Two Hundred Day Average = {self.two_hundred_day_average}\n"
        str_so_far += f"Market Cap = {self.market_cap}\n"
        str_so_far += f"Shares Outstanding = {self.shares_outstanding}\n"
        str_so_far += f"Dividend Yield = {self.dividend_yield}\n"
        str_so_far += f"Environment Score = {self.environment_score}\n"
        str_so_far += f"Social Score = {self.social_score}\n"
        str_so_far += f"Governance Score = {self.governance_score}\n"
        str_so_far += f"Profit Margins = {self.profit_margins}\n"
        str_so_far += f"Book Value = {self.book_value}\n"
        str_so_far += f"Trailing EPS = {self.trailing_eps}\n"
        str_so_far += f"Total Cash = {self.total_cash}\n"
        str_so_far += f"Debt To Equity = {self.debt_to_equity}\n"
        str_so_far += f"Return On Equity = {self.return_on_equity}\n"
        str_so_far += f"Earnings Growth = {self.earnings_growth}\n"
        str_so_far += f"EBITDA = {self.ebitda}\n"
        str_so_far += f"Current Liabilities = {self.current_liabilities}\n"
        str_so_far += f"Revenue = {self.revenue}"
        return str_so_far

    def update_sector_average(self, sector_average_dict: dict[str, SectorAverage]) -> None:
        """ Given a dict of sector names and SectorAverage objects, update self's sector_averages
            attribute to the SectorAverage object with the same sector as self.

        Preconditions:
            - any(sector_name == self.sector for sector_name in sector_average_dict)
        """
        self.sector_averages = sector_average_dict[self.sector]

    def get_value_score(self) -> float:
        """Return the value score of the company's stock.

        The value score is computed by first calculating price earning ratio and the price to book value ratio
        through the following steps:

        price earning ratio = stock price / earnings per share
        price to book value ratio = stock price / outstanding shares

        Then the value score is computed by multiplying the price earning ratio by the price to book value ratio.
        This score provides an insight to how valuable the stock is as it considers the price earning ratio
        measuring the expectations for future growth and the price to book value ratio measuring the market value
        of a company's shares.

        In the case of any missing values for any attributes required for the computation of this score, the average
        sector value for that respective attribute will be used instead.

        If any of the needed attributes is 0 (but not None), then return 0.
        """
        if self.shares_outstanding == 0 or self.trailing_eps == 0 or self.book_value == 0:
            return 0
        else:
            eps = self._get_value_without_none("trailing_eps")

            price_earning_ratio = self.previous_close / eps

            book_value = self._get_value_without_none("book_value")
            book_value_per_share = book_value / self.shares_outstanding

            price_to_book_ratio = self.previous_close / book_value_per_share

            return price_earning_ratio * price_to_book_ratio  # Reciprocal since both values are better if lower?

    def get_growth_score(self) -> float:
        """Return the growth score of the company's stock.

        The growth score is computed by first dividing earnings before interest, taxes, depreciation, and amortization
        by the companies sales (ebitda) by the company's total sales and then multiplying that value by the company's
        earnings growth.

        Dividing ebitda by sales will provide insight on how financially stable a company is and then multiplying by a
        company's earnings growth will provide insight on how likely the company stock is projected to grow in the near
        future.

        In the case of any missing values for any attributes required for the computation of this score, the average
        sector value for that respective attribute will be used instead.

        If any of the needed attributes is 0 (but not None), then return 0.
        """
        if self.ebitda == 0 or self.revenue == 0 or self.earnings_growth == 0:
            return 0
        else:
            ebitda = self._get_value_without_none("ebitda")
            sales = self._get_value_without_none("revenue")
            earnings_growth = self._get_value_without_none("earnings_growth")

            return (ebitda / sales) * earnings_growth

    def get_quality_score(self) -> float:
        """Return the quality score of the company stock.

        The quality score is computed by dividing a company stocks profit margin by its return on equity ratio and then
        dividing by its debt to equity ratio.

        Dividing profit margins by return on equity shows how much money a company is retaining in comparison to the
        money which is being returned to the owners and stakeholders. Generally a lower value is better in this case
        as this would mean that the company is making more investments and the owners/stakeholders are commited to grow
        the company (we find the reciprocal of this value so the higher the better). Then dividing by the company's
        debt to equity ratio shows how risky the companies investments are. Since we are dividing the debt to equity
        ratio, a higher resulting score would mean the company stock will have better quality.

        In the case of any missing values for any attributes required for the computation of this score, the average
        sector value for that respective attribute will be used instead.

        If any of the needed attributes is 0 (but not None), then return 0.
        """
        if self.return_on_equity == 0 or self.profit_margins == 0 or self.debt_to_equity == 0:
            return 0
        else:
            return_on_equity = self._get_value_without_none("return_on_equity")
            profit_margins = self._get_value_without_none("profit_margins")
            debt_to_equity = self._get_value_without_none("debt_to_equity")

            return (1 / (profit_margins / return_on_equity)) / debt_to_equity
            # (profit_margins / return_on_equity) - > Lower value is better
            # 1 / (profit_margins / return_on_equity) - > Higher value is better
            # Lower debt to equity is good

    def get_consistency_score(self) -> float:
        """Return the consistency score of a company stock.

        The consistency score is computed by subtracting the stocks fifty two week high by the fifty two week low, and
        then dividing by the two hundred day average.

        Subtracting the fifty two week high by the fifty two week low will provide the difference between the stocks
        peak and lowest trade value. Although not always, in general a lower value will mean that the stock
        has been more stable over the past year. Dividing by the two hundred day average then provides insight on
        how fast the stock price has moved. A resulting lower score will mean that the stock has been more
        consistent over the past year (we find the reciprocal of this value so the higher the better).

        If any of the attributes is 0 (but not None), then return 0.
        """
        if self.fifty_two_week_low == 0 or self.fifty_two_week_low == 0 or self.two_hundred_day_average == 0:
            return 0
        if self.fifty_two_week_high == self.fifty_two_week_low:
            # To prevent dividing by 0, we set the difference to 0.01, which is the smallest amount possible
            return 1 / (0.01 / self.two_hundred_day_average)
        else:
            return 1 / ((self.fifty_two_week_high - self.fifty_two_week_low) / self.two_hundred_day_average)

    def get_risk_score(self) -> float:
        """ Return the risk score of a company stock.

        The risk score is computed by dividing the total cash by the current liabilities.

        Dividing the total cash by current liabilities will show how stable or unstable the company operations are.
        A higher risk score indicates that the company has significantly higher amounts of current liabilities, short
        term debt, compared to their total cash at hand. This means the stock has a higher chance of going into
        bankruptcy due to insufficient cash.

        In the case of any missing values for any attributes required for the computation of this score, the average
        sector value for that respective attribute will be used instead.

        If any of the attributes is 0 (but not None), then return 0.
        """
        if self.total_cash == 0 or self.current_liabilities == 0:
            return 0
        else:
            total_cash = self._get_value_without_none("total_cash")
            current_liabilties = self._get_value_without_none("current_liabilities")

            return total_cash / current_liabilties

    def get_esg_score(self) -> float:
        """Return an evaluation of a company stock based on its company's environmental, social, and governance issues.

        This score is computed by taking the average of the company's social score, environmental score, and governance
        score.

        By taking the average of a company stocks social, environmental, and governance score, this esg score is able
        to represent how well a company is able to address risks with respect to these attributes. A higher esg score
        means the company is able to effectively address the risk

        In the case of any missing values for any attributes required for the computation of this score, the average
        sector value for that respective attribute will be used instead.
        """
        social_score = self._get_value_without_none("social_score")
        environment_score = self._get_value_without_none("environment_score")
        governance_score = self._get_value_without_none("governance_score")

        return (social_score + environment_score + governance_score) / 3

    def get_dividend_score(self) -> float:
        """Return the dividend score of a given company stock.

        The dividend score is simply the dividend yield of a company stock. This can be directly accessed as it is an
        attribute of the StockData class.

        If any of the needed attributes is missing or 0, then return 0 (since None means 0 in this case).
        """
        dividend_yield = self.dividend_yield
        if dividend_yield is None:
            dividend_yield = 0

        return dividend_yield

    def _get_value_without_none(self, attr: str) -> float:
        """Return the value of the attribute.

        If the attribute is missing, then use the sector average of that attribute.
        """
        attribute = getattr(self, attr)
        if attribute is None:
            sector_average_attr_name = "avg_" + attr
            return getattr(self.sector_averages, sector_average_attr_name)
        else:
            return attribute


class SectorAverage:
    """ A class holding average sector values for those attributes which are used to compute the 7 stock scores.
        These attributes will be used in the case when there are missing values in the respective StockData attributes,
        represented as None.

        Instance Attributes:
        - sector:
            The industry in which the company stock is in.
        - avg environment score:
            The average environment score of all the stocks in this company stocks given sector.
        - avg governance score:
            The average governance score of all the stocks in this company stocks given sector.
        - avg social score:
            The average social score of all the stocks in this company stocks given sector.
        - avg profit margins:
            The average profit margins of all the stocks in this company stocks given sector.
        - avg book value:
            The average bool value of all the stocks in this company stocks given sector.
        - avg trailing eps:
            The average trailing earnings per share of all the stocks in this company stocks given sector.
        - avg total cash:
            The average total cash of all the stocks in this company stocks given sector.
        - avg debt to equity:
            The average debt to equity ratio of all the stocks in this company stocks given sector.
        - avg return on equity:
            The average return on equity of all the stocks in this company stocks given sector.
        - avg earnings growth:
            The average earnings growth of all the stocks in this company stocks given sector.
        - avg ebitda:
            The average earnings before interest, taxes, depreciation, and amortization of all the stocks in this
            company stocks given sector.
        - avg current liabilities:
            The average current liabilities of all the stocks in this company stocks given sector.
        - avg revenue:
            The average revenue of all the stocks in this company stocks given sector.
    """
    sector: str
    avg_environment_score: float
    avg_governance_score: float
    avg_social_score: float
    avg_profit_margins: float
    avg_book_value: float
    avg_trailing_eps: float
    avg_total_cash: float
    avg_debt_to_equity: float
    avg_return_on_equity: float
    avg_earnings_growth: float
    avg_ebitda: float
    avg_current_liabilities: float
    avg_revenue: float

    def __init__(self, stocks: list[StockData]) -> None:
        """ Innitializes this SectorAverage with the given list of stocks.

        Preconditions:
            - stocks != []
            - self.sector == None or all(stock.sector == self.sector for stock in stocks)
        """
        self.sector = stocks[0].sector
        self.avg_environment_score = get_avg_of_sector(stocks, "environment_score")
        self.avg_governance_score = get_avg_of_sector(stocks, "governance_score")
        self.avg_social_score = get_avg_of_sector(stocks, "social_score")
        self.avg_governance_score = get_avg_of_sector(stocks, "governance_score")
        self.avg_profit_margins = get_avg_of_sector(stocks, "profit_margins")
        self.avg_book_value = get_avg_of_sector(stocks, "book_value")
        self.avg_trailing_eps = get_avg_of_sector(stocks, "trailing_eps")
        self.avg_total_cash = get_avg_of_sector(stocks, "total_cash")
        self.avg_debt_to_equity = get_avg_of_sector(stocks, "debt_to_equity")
        self.avg_return_on_equity = get_avg_of_sector(stocks, "return_on_equity")
        self.avg_earnings_growth = get_avg_of_sector(stocks, "earnings_growth")
        self.avg_ebitda = get_avg_of_sector(stocks, "ebitda")
        self.avg_current_liabilities = get_avg_of_sector(stocks, "current_liabilities")
        self.avg_revenue = get_avg_of_sector(stocks, "revenue")

    def __str__(self) -> str:
        """Return a string representation for this SectorAverage"""
        str_so_far = f"Sector: {self.sector}\n"
        str_so_far += f"Average Environmental Score: {self.avg_environment_score}\n"
        str_so_far += f"Average Social Score: {self.avg_social_score}\n"
        str_so_far += f"Average Profit Margins: {self.avg_profit_margins}\n"
        str_so_far += f"Average Book Value: {self.avg_book_value}\n"
        str_so_far += f"Average Trailing EPS: {self.avg_trailing_eps}\n"
        str_so_far += f"Average Total Cash: {self.avg_total_cash}\n"
        str_so_far += f"Average Debt-To-Equity: {self.avg_debt_to_equity}\n"
        str_so_far += f"Average Return On Equity: {self.avg_return_on_equity}\n"
        str_so_far += f"Average Earnings Growth: {self.avg_earnings_growth}\n"
        str_so_far += f"Average EBITDA: {self.avg_ebitda}\n"
        str_so_far += f"Average Current Liabilities: {self.avg_current_liabilities}\n"
        str_so_far += f"Average Revenue: {self.avg_revenue}"
        return str_so_far


def get_avg_of_sector(stocks: list[StockData], attribute: str) -> float:
    """Compute the sector average of a stock attribute given a list of StockData with the same sector

    Preconditions:
        - all(stocks[0].symbol == stock.symbol for stock in stocks)
        - any(getattr(stock, attribute) is not None for stock in stocks)
        - attribute is an attribute of StockData class
    """
    lst_so_far = []
    for stock in stocks:
        attribute_value = getattr(stock, attribute)
        if attribute_value is not None:
            lst_so_far.append(attribute_value)
    return sum(lst_so_far) / len(lst_so_far)


class StockScore:
    """ A class holding all score attributes for a given company stock from StockData.

    Representation Invariants:
    - stock data:
        The StockData object self is representing
    - value score:
        A numerical score representing an evaluation of the company stock.
    - growth score:
        A numerical value represnting the growth of a company stock.
    - quality score:
        A numerical score representing the condition of a company stock.
    - consistency score:
        A numerical score representing how stable a company stock has performed over the past year.
    - risk score:
        A numerical representation how volatile a company stock may be to invest in.
    - dividend score:
        A numerical value representing how risky a stocks dividend is.
    - esg score:
        A numerical value representing how well a company is able to address risks with respect to its environmental,
        social, and governance score.
    """
    stock_data: StockData

    value_score: float
    growth_score: float
    quality_score: float
    consistency_score: float
    risk_score: float
    dividend_score: float
    esg_score: float

    def __init__(self, stock: StockData) -> None:
        """ Innitialzes yjos StockScore with the given attributes. At default, all the decile attributes are set to 0.
        """
        self.stock_data = stock

        self.value_score = stock.get_value_score()
        self.growth_score = stock.get_growth_score()
        self.quality_score = stock.get_quality_score()
        self.consistency_score = stock.get_consistency_score()
        self.risk_score = stock.get_risk_score()
        self.dividend_score = stock.get_dividend_score()
        self.esg_score = stock.get_esg_score()


if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True)
    import python_ta
    python_ta.check_all(config={
        'max-line-length': 120,
        'disable': ['E9999', 'W0401', 'R0902', 'R0913', 'R0914']
    })
